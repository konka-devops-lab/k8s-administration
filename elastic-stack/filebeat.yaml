---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: filebeat
  namespace: logging
  labels:
    k8s-app: filebeat
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: filebeat
  labels:
    k8s-app: filebeat
rules:
- apiGroups: [""]
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups: [""]
  resources:
  - namespaces
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups: ["apps"]
  resources:
  - replicasets
  - statefulsets
  - daemonsets
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: filebeat
  labels:
    k8s-app: filebeat
subjects:
- kind: ServiceAccount
  name: filebeat
  namespace: logging  # This must match your namespace
roleRef:
  kind: ClusterRole
  name: filebeat
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: filebeat-config
  namespace: logging
  labels:
    k8s-app: filebeat
data:
  filebeat.yml: |
    filebeat.inputs:
      - type: container
        paths:
          - /var/log/containers/*.log
        processors:
          - add_kubernetes_metadata:
              host: ${NODE_NAME}
              matchers:
                - logs_path:
                    logs_path: "/var/log/containers/"

          # Drop logs that are NOT from the instana namespace
          - drop_event:
              when:
                not:
                  equals:
                    kubernetes.namespace: "instana"

    processors:
      - add_cloud_metadata:
      - add_host_metadata:

    output.logstash:
      hosts: ["logstash.logging.svc.cluster.local:5044"]


    # filebeat.inputs:
    # - type: container
    #   paths:
    #     - /var/log/containers/*.log
    #   processors:
    #     - add_kubernetes_metadata:
    #         host: ${NODE_NAME}
    #         matchers:
    #         - logs_path:
    #             logs_path: "/var/log/containers/"
    # processors:
    #   - add_cloud_metadata:
    #   - add_host_metadata:
    # output.logstash:
    #   hosts: ["logstash.logging.svc.cluster.local:5044"]

    # filebeat.inputs:
    # - type: container
    #   paths:
    #     - /var/log/containers/*.log
    #   scan_frequency: 30s
    #   close_inactive: 5m
    #   processors:
    #     - add_kubernetes_metadata:
    #         host: ${NODE_NAME}
    #         matchers:
    #         - logs_path:
    #             logs_path: "/var/log/containers/"

    # - type: log
    #   paths:
    #     - /var/lib/docker/containers/*/*.log
    #   symlinks: true
    #   scan_frequency: 30s
    #   close_inactive: 5m
    #   processors:
    #     - add_kubernetes_metadata:
    #         host: ${NODE_NAME}

    # # Application-specific parsing
    # processors:
    #   - add_cloud_metadata: ~
    #   - add_host_metadata: ~
      
    #   # Add custom fields for microservices
    #   - if:
    #       equals:
    #         kubernetes.labels.app: "catalogue"
    #     then:
    #       - add_fields:
    #           fields:
    #             service: "catalogue"
    #             language: "nodejs"
    #             environment: "dev"
    #             tier: "application"
      
    #   - if:
    #       equals:
    #         kubernetes.labels.app: "user"
    #     then:
    #       - add_fields:
    #           fields:
    #             service: "user"
    #             language: "nodejs"
    #             environment: "dev"
    #             tier: "application"
      
    #   - if:
    #       equals:
    #         kubernetes.labels.app: "cart"
    #     then:
    #       - add_fields:
    #           fields:
    #             service: "cart"
    #             language: "nodejs"
    #             environment: "dev"
    #             tier: "application"
      
    #   - if:
    #       equals:
    #         kubernetes.labels.app: "shipping"
    #     then:
    #       - add_fields:
    #           fields:
    #             service: "shipping"
    #             language: "java"
    #             environment: "dev"
    #             tier: "application"
      
    #   - if:
    #       equals:
    #         kubernetes.labels.app: "payment"
    #     then:
    #       - add_fields:
    #           fields:
    #             service: "payment"
    #             language: "python"
    #             environment: "dev"
    #             tier: "application"
      
    #   - if:
    #       equals:
    #         kubernetes.labels.app: "frontend"
    #     then:
    #       - add_fields:
    #           fields:
    #             service: "frontend"
    #             environment: "dev"
    #             tier: "application"
      
    #   # Database services
    #   - if:
    #       equals:
    #         kubernetes.labels.app: "mysql"
    #     then:
    #       - add_fields:
    #           fields:
    #             service: "mysql"
    #             environment: "dev"
    #             tier: "database"
      
    #   - if:
    #       equals:
    #         kubernetes.labels.app: "mongo"
    #     then:
    #       - add_fields:
    #           fields:
    #             service: "mongo"
    #             environment: "dev"
    #             tier: "database"
      
    #   - if:
    #       equals:
    #         kubernetes.labels.app: "redis"
    #     then:
    #       - add_fields:
    #           fields:
    #             service: "redis"
    #             environment: "dev"
    #             tier: "database"
      
    #   - if:
    #       equals:
    #         kubernetes.labels.app: "rabbitmq"
    #     then:
    #       - add_fields:
    #           fields:
    #             service: "rabbitmq"
    #             environment: "dev"
    #             tier: "database"

    # # Kubernetes autodiscovery for dynamic pods - TARGET INSTANA NAMESPACE
    # filebeat.autodiscover:
    #   providers:
    #     - type: kubernetes
    #       node: ${NODE_NAME}
    #       include_labels: ["app"]
    #       # Focus on instana namespace specifically
    #       templates:
    #         - condition:
    #             and:
    #               - equals:
    #                   kubernetes.namespace: "instana"
    #               - equals:
    #                   kubernetes.labels.tier: "application"
    #           config:
    #             - type: container
    #               paths:
    #                 - /var/log/containers/*${data.kubernetes.container.id}.log
    #               scan_frequency: 30s
    #               close_inactive: 5m
    #               processors:
    #                 - add_kubernetes_metadata: ~
    #                 - add_fields:
    #                     fields:
    #                       environment: "dev"
    #                       tier: "application"

    #         - condition:
    #             and:
    #               - equals:
    #                   kubernetes.namespace: "instana"
    #               - equals:
    #                   kubernetes.labels.tier: "database"
    #           config:
    #             - type: container
    #               paths:
    #                 - /var/log/containers/*${data.kubernetes.container.id}.log
    #               scan_frequency: 30s
    #               close_inactive: 5m
    #               processors:
    #                 - add_kubernetes_metadata: ~
    #                 - add_fields:
    #                     fields:
    #                       environment: "dev"
    #                       tier: "database"

    #         # Fallback: catch all containers in instana namespace
    #         - condition:
    #             equals:
    #               kubernetes.namespace: "instana"
    #           config:
    #             - type: container
    #               paths:
    #                 - /var/log/containers/*${data.kubernetes.container.id}.log
    #               scan_frequency: 30s
    #               close_inactive: 5m
    #               processors:
    #                 - add_kubernetes_metadata: ~
    #                 - add_fields:
    #                     fields:
    #                       environment: "dev"

    # # Queue settings to handle backpressure
    # queue:
    #   mem:
    #     events: 2048
    #     flush:
    #       min_events: 512
    #       timeout: 5s

    # output.logstash:
    #   hosts: ["logstash.logging.svc.cluster.local:5044"]
    #   ssl.enabled: false
    #   bulk_max_size: 512
    #   timeout: 30

    # # Setup
    # setup.template:
    #   name: "logs"
    #   pattern: "logs-*"

    # setup.ilm:
    #   enabled: false

    # logging.level: info
    # logging.to_files: true
    # logging.files:
    #   path: /var/log/filebeat
    #   name: filebeat
    #   keepfiles: 3
    #   permissions: 0644
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: filebeat
  namespace: logging
  labels:
    k8s-app: filebeat
spec:
  selector:
    matchLabels:
      k8s-app: filebeat
  template:
    metadata:
      labels:
        k8s-app: filebeat
    spec:
      serviceAccountName: filebeat
      terminationGracePeriodSeconds: 30
      containers:
      - name: filebeat
        image: docker.elastic.co/beats/filebeat:8.11.0
        args: [
          "-c", "/usr/share/filebeat/filebeat.yml",
          "-e",
        ]
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: ELASTICSEARCH_HOST
          value: "elasticsearch"
        - name: ELASTICSEARCH_PORT
          value: "9200"
        securityContext:
          runAsUser: 0
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 100Mi
        volumeMounts:
        - name: config
          mountPath: /usr/share/filebeat/filebeat.yml
          readOnly: true
          subPath: filebeat.yml
        - name: data
          mountPath: /usr/share/filebeat/data
        - name: varlog
          mountPath: /var/log
          readOnly: true
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: dockerlogs
          mountPath: /var/log/containers
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: filebeat-config
          defaultMode: 0640
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: dockerlogs
        hostPath:
          path: /var/log/containers
      - name: data
        hostPath:
          path: /var/lib/filebeat-data
          type: DirectoryOrCreate