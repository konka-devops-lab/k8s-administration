---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: filebeat
  namespace: logging
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: filebeat
rules:
- apiGroups: [""]
  resources: ["pods", "namespaces", "nodes"]
  verbs: ["get", "watch", "list"]
- apiGroups: ["apps"]
  resources: ["deployments", "statefulsets", "replicasets"]
  verbs: ["get", "watch", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: filebeat
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: filebeat
subjects:
- kind: ServiceAccount
  name: filebeat
  namespace: logging
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: filebeat-config
  namespace: logging
data:
   filebeat.yml: |
    filebeat.inputs:
    # NodeJS microservices
    - type: container
      paths:
        - /var/log/containers/dev-cart*.log
        - /var/log/containers/dev-catalogue*.log
        - /var/log/containers/dev-user*.log
      processors:
        - add_kubernetes_metadata:
            host: ${NODE_NAME}
            matchers:
              - logs_path:
                  logs_path: "/var/log/containers/"
      multiline.type: pattern
      multiline.pattern: "^[0-9]{4}"
      multiline.negate: true
      multiline.match: after

    # Java microservice
    - type: container
      paths:
        - /var/log/containers/dev-shipping*.log
      processors:
        - add_kubernetes_metadata:
            host: ${NODE_NAME}
            matchers:
              - logs_path:
                  logs_path: "/var/log/containers/"

    # Python microservice
    - type: container
      paths:
        - /var/log/containers/dev-payment*.log
      processors:
        - add_kubernetes_metadata:
            host: ${NODE_NAME}
            matchers:
              - logs_path:
                  logs_path: "/var/log/containers/"

    # Databases and others (mongo, mysql, redis, rabbitmq)
    - type: container
      paths:
        - /var/log/containers/dev-mongo*.log
        - /var/log/containers/dev-mysql*.log
        - /var/log/containers/dev-redis*.log
        - /var/log/containers/dev-rabbitmq*.log
      processors:
        - add_kubernetes_metadata:
            host: ${NODE_NAME}
            matchers:
              - logs_path:
                  logs_path: "/var/log/containers/"

   output.logstash:
    hosts: ["logstash.logging.svc.cluster.local:5044"]

  #   filebeat.inputs:
  #   # CART - NodeJS
  #   - type: container
  #     paths:
  #       - /var/log/containers/cart*.log
  #     processors:
  #       - add_kubernetes_metadata:
  #           host: ${NODE_NAME}
  #           matchers:
  #             - logs_path:
  #                 logs_path: "/var/log/containers/"
  #       - drop_event:
  #           when:
  #             not:
  #               equals:
  #                 kubernetes.labels.app: "cart"
  #     fields:
  #       index: "cart-logs"

  #   # CATALOGUE - NodeJS
  #   - type: container
  #     paths:
  #       - /var/log/containers/catalogue*.log
  #     processors:
  #       - add_kubernetes_metadata:
  #           host: ${NODE_NAME}
  #           matchers:
  #             - logs_path:
  #                 logs_path: "/var/log/containers/"
  #       - drop_event:
  #           when:
  #             not:
  #               equals:
  #                 kubernetes.labels.app: "catalogue"
  #     fields:
  #       index: "catalogue-logs"

  #   # USER - NodeJS
  #   - type: container
  #     paths:
  #       - /var/log/containers/user*.log
  #     processors:
  #       - add_kubernetes_metadata:
  #           host: ${NODE_NAME}
  #           matchers:
  #             - logs_path:
  #                 logs_path: "/var/log/containers/"
  #       - drop_event:
  #           when:
  #             not:
  #               equals:
  #                 kubernetes.labels.app: "user"
  #     fields:
  #       index: "user-logs"

  #   # SHIPPING - Java
  #   - type: container
  #     paths:
  #       - /var/log/containers/shipping*.log
  #     processors:
  #       - add_kubernetes_metadata:
  #           host: ${NODE_NAME}
  #           matchers:
  #             - logs_path:
  #                 logs_path: "/var/log/containers/"
  #       - drop_event:
  #           when:
  #             not:
  #               equals:
  #                 kubernetes.labels.app: "shipping"
  #     fields:
  #       index: "shipping-logs"

  #   # PAYMENT - Python
  #   - type: container
  #     paths:
  #       - /var/log/containers/payment*.log
  #     processors:
  #       - add_kubernetes_metadata:
  #           host: ${NODE_NAME}
  #           matchers:
  #             - logs_path:
  #                 logs_path: "/var/log/containers/"
  #       - drop_event:
  #           when:
  #             not:
  #               equals:
  #                 kubernetes.labels.app: "payment"
  #     fields:
  #       index: "payment-logs"

  #   # FRONTEND - Nginx
  #   - type: container
  #     paths:
  #       - /var/log/containers/frontend*.log
  #     processors:
  #       - add_kubernetes_metadata:
  #           host: ${NODE_NAME}
  #           matchers:
  #             - logs_path:
  #                 logs_path: "/var/log/containers/"
  #       - drop_event:
  #           when:
  #             not:
  #               equals:
  #                 kubernetes.labels.app: "frontend"
  #     fields:
  #       index: "frontend-logs"

  #   # DATABASES / BROKERS (Mongo, MySQL, Redis, RabbitMQ)
  #   - type: container
  #     paths:
  #       - /var/log/containers/mongo*.log
  #       - /var/log/containers/mysql*.log
  #       - /var/log/containers/redis*.log
  #       - /var/log/containers/rabbitmq*.log
  #     processors:
  #       - add_kubernetes_metadata:
  #           host: ${NODE_NAME}
  #           matchers:
  #             - logs_path:
  #                 logs_path: "/var/log/containers/"
  #     fields:
  #       index: "infrastructure-logs"

  #   output.logstash:
  #     hosts: ["logstash.logging.svc.cluster.local:5044"]
  #     index: '%{[fields.index]}-%{+yyyy.MM.dd}'  # Dynamically uses microservice index

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: filebeat
  namespace: logging
  labels:
    app: filebeat
spec:
  selector:
    matchLabels:
      app: filebeat
  template:
    metadata:
      labels:
        app: filebeat
    spec:
      serviceAccountName: filebeat
      terminationGracePeriodSeconds: 30
      containers:
      - name: filebeat
        image: docker.elastic.co/beats/filebeat:8.15.0
        args: ["-c", "/etc/filebeat.yml", "-e"]
        env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
        volumeMounts:
        - name: config
          mountPath: /etc/filebeat.yml
          subPath: filebeat.yml
        - name: varlog
          mountPath: /var/log
          readOnly: true   # âœ… read-only hostPath
      volumes:
      - name: config
        configMap:
          name: filebeat-config
      - name: varlog
        hostPath:
          path: /var/log
          type: Directory
---
