---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
  namespace: logging
data:
  logstash.yml: |
    http.host: "0.0.0.0"
    xpack.monitoring.enabled: false
    
  logstash.conf: |
    input {
      file {
        path => "/var/log/*.log"
        start_position => "beginning"
      }
    }

    filter {
      # Example filter - you can modify as needed
      grok {
        match => { "message" => "%{COMBINEDAPACHELOG}" }
      }
    }

    output {
      elasticsearch {
        hosts => ["http://elasticsearch.logging.svc.cluster.local:9200"]
        index => "logs-%{+YYYY.MM.dd}"
      }
      stdout { codec => rubydebug }
    }
    # input {
    #   beats {
    #     port => 5044
    #     host => "0.0.0.0"
    #     ssl => false
    #   }
    # }

    # filter {
    #   # Parse JSON logs (common in structured logging)
    #   if [message] =~ /^{.*}$/ {
    #     json {
    #       source => "message"
    #       target => "json_content"
    #     }
    #   }

    #   # Grok patterns for different log formats
    #   grok {
    #     match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:loglevel} %{GREEDYDATA:message}" }
    #     overwrite => [ "message" ]
    #   }

    #   # Service-specific parsing
    #   if [service] == "catalogue" or [service] == "user" or [service] == "cart" {
    #     # Node.js application parsing
    #     grok {
    #       match => { "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\] %{WORD:loglevel}: %{GREEDYDATA:log_message}" }
    #     }
    #   }

    #   if [service] == "shipping" {
    #     # Java application parsing
    #     grok {
    #       match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:loglevel} \[%{DATA:thread}\] %{DATA:class} - %{GREEDYDATA:log_message}" }
    #     }
    #   }

    #   if [service] == "payment" {
    #     # Python application parsing
    #     grok {
    #       match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} - %{WORD:loglevel} - %{DATA:module} - %{GREEDYDATA:log_message}" }
    #     }
    #   }

    #   # Database log parsing
    #   if [service] == "mysql" {
    #     grok {
    #       match => { "message" => "%{NUMBER:timestamp} \[%{WORD:level}\] %{GREEDYDATA:message}" }
    #     }
    #   }

    #   if [service] == "mongo" {
    #     grok {
    #       match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{WORD:component} %{LOGLEVEL:loglevel} %{GREEDYDATA:message}" }
    #     }
    #   }

    #   # Add timestamp from log message if available
    #   date {
    #     match => [ "timestamp", "ISO8601", "YYYY-MM-dd HH:mm:ss,SSS", "YYYY-MM-dd HH:mm:ss" ]
    #     target => "@timestamp"
    #     timezone => "UTC"
    #   }

    #   # Remove temporary fields
    #   mutate {
    #     remove_field => [ "timestamp", "json_content" ]
    #   }

    #   # Add geoip if relevant
    #   if [clientip] {
    #     geoip {
    #       source => "clientip"
    #       target => "geoip"
    #     }
    #   }
    # }

    # output {
    #   elasticsearch {
    #     hosts => ["http://elasticsearch.logging.svc.cluster.local:9200"]
    #     index => "logs-%{[service]}-%{+YYYY.MM.dd}"
    #     user => "elastic"
    #     password => "${ELASTIC_PASSWORD}"
    #     ssl => false
    #   }

    #   # Fallback output (for debugging)
    #   stdout {
    #     codec => rubydebug
    #   }
    # }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
  namespace: logging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logstash
  template:
    metadata:
      labels:
        app: logstash
    spec:
      containers:
      - name: logstash
        image: docker.elastic.co/logstash/logstash:8.15.0
        ports:
        - containerPort: 5044   # Beats input
        volumeMounts:
        - name: config
          mountPath: /usr/share/logstash/config/logstash.yml
          subPath: logstash.yml
        - name: config
          mountPath: /usr/share/logstash/pipeline/logstash.conf
          subPath: logstash.conf
      volumes:
      - name: config
        configMap:
          name: logstash-config
---
apiVersion: v1
kind: Service
metadata:
  name: logstash
  namespace: logging
spec:
  ports:
  - port: 5044
    targetPort: 5044
    protocol: TCP
  selector:
    app: logstash
