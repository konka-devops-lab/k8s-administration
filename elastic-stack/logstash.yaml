---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
  namespace: logging
data:
  logstash.yml: |
    http.host: "0.0.0.0"
    xpack.monitoring.enabled: false
    
  logstash.conf: |
    input {
      beats {
        port => 5044
      }
    }

    filter {
      # Extract service from container filename
      dissect {
        mapping => { "[@metadata][filename]" => "%{namespace}_%{service}-%{rest}" }
      }
      mutate {
        add_field => { "service_info_namespace" => "%{namespace}" }
        add_field => { "service_info_service" => "%{service}" }
      }

      # Extract HTTP method, endpoint, status from log message
      grok {
        match => { "message" => "%{WORD:method} %{URIPATH:endpoint} %{NUMBER:status}" }
        # Optional: If your log format is different, adjust the pattern
      }

      # Convert status to integer for aggregations
      mutate {
        convert => { "status" => "integer" }
      }
    }

    output {
      elasticsearch {
        hosts => ["http://elasticsearch.logging.svc.cluster.local:9200"]
        index => "app-logs-%{+YYYY.MM.dd}"
      }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
  namespace: logging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logstash
  template:
    metadata:
      labels:
        app: logstash
    spec:
      containers:
      - name: logstash
        image: docker.elastic.co/logstash/logstash:8.15.0
        ports:
        - containerPort: 5044   # Beats input
        volumeMounts:
        - name: config
          mountPath: /usr/share/logstash/config/logstash.yml
          subPath: logstash.yml
        - name: config
          mountPath: /usr/share/logstash/pipeline/logstash.conf
          subPath: logstash.conf
      volumes:
      - name: config
        configMap:
          name: logstash-config
---
apiVersion: v1
kind: Service
metadata:
  name: logstash
  namespace: logging
spec:
  ports:
  - port: 5044
    targetPort: 5044
    protocol: TCP
  selector:
    app: logstash
